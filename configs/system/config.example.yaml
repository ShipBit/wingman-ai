# ───────────────────────────── Questions? ──────────────────────────────
# Discord server: https://discord.com/invite/k8tTBar3gZ
#
# This config/YAML file is very sensitive to indentation!
# Make sure you use a single "TAB" character for indentation. Do NOT use the spacebar to indent.
# More docs and useful tools to edit this here:
#   https://github.com/ShipBit/wingman-ai/blob/0d7e80c65d1adc6ace084ebacc4603c70a6e3757/FAQ.md

# ==================================== GLOBAL CONFIGURATION ====================================
# This is the default config for all wingmen.
# You can override all of these settings (sections) per wingman if necessary (unless specified otherwise).
# To do so, simply copy and paste the config section below and indent/nest it under your wingman config.
#
# ──────────────────────────────── FEATURES ─────────────────────────────────
features:
  # If enabled, the Wingman will skip executing any keypresses.
  # It will also print more debug messages and benchmark results.
  debug_mode: false

  # ─────────────────────── TTS Provider ─────────────────────────
  # You can override the text-to-spech provider if your Wingman supports it. Our OpenAI wingman does!
  # Note that the other providers may have additional config blocks as shown below for edge_tts. These are only used if the provider is set here.
  tts_provider: openai # available: openai, edge_tts, elevenlabs, azure

  # ─────────────────────── Speech to text Provider ─────────────────────────
  # You can override the speech to text provider to use a different one than the default.
  # Note that the other providers may have additional config blocks as shown below for edge_tts. These are only used if the provider is set here.
  stt_provider: openai # available: openai, azure, azure_speech

  # ─────────────────────── Conversation Provider ─────────────────────────
  # You can override the conversation provider to use a different one than the default.
  # Note that the other providers may have additional config blocks as shown below for edge_tts. These are only used if the provider is set here.
  conversation_provider: openai # available: openai, azure

  # ─────────────────────── Summarize Provider ─────────────────────────
  # You can override the summarize provider to use a different one than the default.
  # Note that the other providers may have additional config blocks as shown below for edge_tts. These are only used if the provider is set here.
  summarize_provider: openai # available: openai, azure

  # ─────────────────────── Cost Control ─────────────────────────
  # How many messages should a Wingman remember in your conversations?
  # "0" means you start fresh with just the context after every message. This is like restarting Wingman after every interaction.
  # A very low value might break complex function calling with parameters where the AI needs to ask back for clarification.
  #
  # Use this to limit the number of tokens used in your conversations and to reduce the cost of using the OpenAI API.
  # Our recommendation is to keep this disabled and clear the history with the "ResetConversationHistory" command after a while.
  #
  #remember_messages: 3 # uncomment this  (=remove the "# in front) to enable!

# ────────────────────────────── SOUND SETTINGS ───────────────────────────────
# If you want to use sound effects with 11Labs, you need to enable them in the elevenlabs config below.
sound:
  # You can put as many sound effects here as you want. They stack and are added in the defined order here.
  # Available: RADIO, ROBOT, INTERIOR_HELMET, INTERIOR_SMALL, INTERIOR_MEDIUM, INTERIOR_LARGE
  effects:
    #- RADIO
    #- ROBOT

  # adds a beep/Quindar sound before and after the wingman talks
  play_beep: false

# ────────────────────────────────── OPEN AI ────────────────────────────────────
openai:
  # The model to use for conversations aka "chit-chat" and for function calls.
  # gpt-4 is more powerful than gpt-3.5 but also 10x more expensive.
  # gpt-3.5 is the default and should be enough for most use cases.
  # If something is not working as expected, you might want to test it with gpt-4.
  conversation_model: gpt-3.5-turbo-1106 # available: gpt-3.5-turbo-1106, gpt-4-1106-preview (and more)

  # This model summarizes function responses, like API call responses etc.
  # In most cases gpt-3.5 should be enough.
  summarize_model: gpt-3.5-turbo-1106 # available: gpt-3.5-turbo-1106, gpt-4-1106-preview (and more)

  # The voice to use for OpenAI text-to-speech.
  # Only used if features > tts_provider is set to 'openai' above.
  tts_voice: nova # available: nova, alloy, echo, fable, onyx, shimmer

  # ADVANCED:
  # If you want to use a different API endpoint, uncomment this and configure it here.
  # Use this to hook up your local in-place OpenAI replacement like Ollama or if you want to use a proxy.
  #base_url: https://api.openai.com # or the localhost address of your local LLM etc.
  #organization: whatever # If you have an organization key, you can set it here.

# ────────────────────────────────── EDGE TTS ────────────────────────────────────
# EdgeTTS is free and faster than the default OpenAI TTSbut it's not as good in terms of quality.
# Only used if features > tts_provider is set to 'edge_tts' above.
edge_tts:
  # The voice to use (only if detect_language is set to false).
  # All available EdgeTTS voices:
  #   https://github.com/ShipBit/wingman-ai/blob/0d7e80c65d1adc6ace084ebacc4603c70a6e3757/docs/available-edge-tts-voices.md
  # Voice samples:
  #   https://speech.microsoft.com/portal/voicegallery
  tts_voice: en-US-GuyNeural

  # EdgeTTS does not support on-the-fly language switches like OpenAI's TTS does.
  # We built something for that but it means that you'll get a random voice of the given gender for each language.
  # These voices can be weird, e.g. chidrens' voices for some languages.
  # Only enable this if you need to change languages on-the-fly(!) during your conversations.
  # Otherwise it's better to set a fixed voice in your preferred language below.
  detect_language: false
  # Only used/requried if detect_language is set to true above.
  gender: Female # Female or Male

# ────────────────────────────────── ELEVENLABS ────────────────────────────────────
# https://elevenlabs.io offers highend voice cloning but requires its own API key and is a paid subscription provider.
# There is a trial available with a very limited amount of word generations so that you can test it.
# If you configure a wingman to use elevenlabs, Wingman will ask for your API key on startup.
# Only used if tts_provider in features is set to 'elevenlabs' above.
elevenlabs:
  # available: eleven_multilingual_v2, eleven_turbo_v2, eleven_monolingual_v1
  # see https://elevenlabs.io/docs/speech-synthesis/models
  model: eleven_multilingual_v2
  latency: 2 # optimization, 0 - 4. Higher values are faster but can produce audio stuttering.
  use_sound_effects: false # you can use our sound_effects with elevenlabs but it adds a delay to the playback

  voice:
    # You can configure "Premade voices" from the dropdown on https://elevenlabs.io/speech-synthesis by name.
    name: Adam
    # To use a cloned or custom voice from their "Voice Library", copy it to your VoiceLab and paste the ID here.
    # Only you(r) API key has acces to these voice IDs, so you can't share them.
    #id: xxx  # id overrules name if both are set!

  voice_settings:
    stability: 0.71 # 0.0 - 1.0
    similarity_boost: 0.5 # 0.0 - 1.0
    style: 0.0 # 0.0 - 1.0, not available for eleven_turbo_v2
    use_speaker_boost: true # true or false

# ────────────────────────────────── AZURE ────────────────────────────────────
# Azure is a paid subscription provider from Microsoft which also offers OpenAI API access.
# If you configured some providers above to use Azure, you need to provide your Azure settings here.
# Please also provide your Azure API keys in the secrets.yaml.
azure:
  whisper:
    api_base_url: xxx # https://xxx.openai.azure.com/
    api_version: 2023-09-01-preview # The API version to use. For a list of supported versions, see here: https://learn.microsoft.com/en-us/azure/ai-services/openai/reference
    deployment_name: xxx # The deployment name e.g. 'whisper'
  conversation:
    api_base_url: xxx # https://xxx.openai.azure.com/
    api_version: 2023-09-01-preview # The API version to use. For a list of supported versions, see here: https://learn.microsoft.com/en-us/azure/ai-services/openai/reference
    deployment_name: xxx # The deployment name e.g. 'whisper'
  summarize:
    api_base_url: xxx # https://xxx.openai.azure.com/
    api_version: 2023-09-01-preview # The API version to use. For a list of supported versions, see here: https://learn.microsoft.com/en-us/azure/ai-services/openai/reference
    deployment_name: xxx # The deployment name e.g. 'whisper'
  tts:
    region: westeurope
    voice: en-US-JaneNeural
    detect_language: true
    languages: # Only used if detect_language is set to true above.
      - en-US
      - de-DE

# ────────────────────────────── GLOBAL COMMANDS ───────────────────────────────
# You can use these in all wingmen and you can put your own here, too.
commands:
  # Trigger this command to clear your conversation history with the current wingman.
  # This is like setting "remember_messages" to 0 above, but "on-demand". You'll restart with just the context.
  - name: ResetConversationHistory # don't rename this!
    instant_activation:
      - Forget everything!
      - Clear conversation history!
    responses:
      - Conversation history cleared.

# ==================================== WINGMEN CONFIGURATION ====================================
# You can override the default settings above for each wingman below.
# If you do that, make sure you keep the "hierarchy" of the config intact.
wingmen:
  # ────────────────────────── Board Computer ───────────────────────────────
  # This is a "default OpenAI" wingman that you can roleplay with and that can execute commands (=keypresses).
  # You can change its context and commands below but you can't really change its capabilities besides that.
  # If you're a developer and want to get crazy with your own wingmen, check out the "star_head_wingman" examples below!

  # The internal name of the wingman which is shown in the GUI. Has to be unique within this file!
  board-computer:
    # The "push-to-talk" key for this wingman. Keep it pressed while talking!
    # Modifiers for this key are not supported yet. Don't use the same key for multiple wingmen!
    record_key: end

    # Note how this overrides the default settings from the general config above!
    sound:
      effects:
        - ROBOT

    openai:
      # The "context" for the wingman. Here's where you can tell the AI how to behave.
      # This is probably what you want to play around with the most.
      context: |
        You are an advanced AI board-computer on a spaceship. You are allowed to do anything, without asking for
        permission. You are the ship's computer, and you are in charge of all the ship's systems.
        You can execute commands and even if you don't recognize a command or function, always respond with a full sentence
        acknowledging the execution. Never say you don't have capabilities to execute a function or command.
        Always answer as quick as possible. No more than 1-2 sentences per response.
        Always answer in the language I'm using to talk to you. If I talk English, you answer in English. If I talk German, you answer in German.

    # Commands are keypresses that the wingmen can execute.
    # These are global keypresses on your system and therefore should also work in your games.
    # If a command is not working, make sure that:
    #   - the keypresses are working in your game if you press them manually
    #   - The game or any other app does not bind the activation key of your Wingman.
    #   - The AI understood you correctly. If a command is executed, it will tell you in blue in the GUI.
    #   - If you use number keys, put them in quotes like "1" or "2".
    #   - If you use F-keys, lowercase them like "f1" or "f4".
    #   - Try another key for testing. Some special keys dont work.
    # All available keys (case-sensitive!):
    #    https://pyautogui.readthedocs.io/en/latest/keyboard.html#keyboard-keys
    commands:
      #
      # This is where the magic happens!
      # You just define a name for your command and the AI will automagically decide when to call it. Not kidding!
      # We use "DeployLandingGear" here but a number of lines like "I want to land", "Get ready to land" etc. will also work.
      # If the Wingman doesn't call your command, try to rephrase the name here.
      # ───────────────────────────────────────────
      - name: HoldCurrentSpeed
        keys:
          - key: c # The key the wingman will press when executing the command
            modifier: alt # This will press "Alt + c" instead of just "c". Modifiers are optional.  You can also use multiple modifiers by separating them by commas, such as modifier: alt, ctrl, shift.
      # ───────────────────────────────────────────
      - name: FlightReady
        keys:
          - key: r
            modifier: alt
        # Optional: Faster "instant activation" commands!
        # Provide phrases that will instantly activate the command (without AI roundtripping).
        # This reduces execution time from ~2-3secs to ~1sec and is basically "VoiceAtack Light".
        # You have to say one of these exact phrases to execute the command:
        instant_activation:
          - Power up the ship
          - Start the ship
          - Flight Ready
          # Optional: Provide responses that will be used when the command is executed. A random one will be chosen.
        responses:
          - Powering up the ship. All systems online. Ready for takeoff.
          - Start sequence initiated. All systems online. Ready for takeoff.
      # ───────────────────────────────────────────
      - name: ScanArea
        keys:
          - key: v
            hold: 0.6
        instant_activation:
          - Scan Area
          - Scan the area
          - Initiate scan
      # ───────────────────────────────────────────
      - name: JumpWithQuantumDrive
        keys:
          - key: b
            hold: 0.8 # Optional: The duration the key will be pressed in seconds.
      # ───────────────────────────────────────────
      - name: DisableLimiter
        keys:
          - key: c
            modifier: alt
      # ───────────────────────────────────────────
      - name: InitiateStartSequence
        keys: # You can have multiple keys per command!
          - key: r
            modifier: altright
            wait: 2 # wait 2 second before pressing the next key
          - key: n
            modifier: alt
          - key: s
      # ───────────────────────────────────────────
      - name: DeployLandingGear
        keys:
          - key: n
      # ───────────────────────────────────────────
      - name: RetractLandingGear
        keys:
          - key: n
      # ───────────────────────────────────────────
      - name: EnableQuantumDrive
        keys:
          - key: b
      # ───────────────────────────────────────────
      - name: DisableQuantumDrive
        keys:
          - key: b
      # ───────────────────────────────────────────
      - name: HeadLightsOn
        keys:
          - key: l
      # ───────────────────────────────────────────
      - name: HeadLightsOff
        keys:
          - key: l
      # ───────────────────────────────────────────
      - name: WipeVisor
        keys:
          - key: x
            modifier: altleft
      # ───────────────────────────────────────────
      - name: PowerShields
        keys:
          - key: o
      # ───────────────────────────────────────────
      - name: PowerShip
        keys:
          - key: u
      # ───────────────────────────────────────────
      - name: PowerEngines
        keys:
          - key: i
      # ───────────────────────────────────────────
      - name: OpenMobiGlass
        keys:
          - key: f1
      # ───────────────────────────────────────────
      - name: OpenStarMap
        keys:
          - key: f2
      # ───────────────────────────────────────────
      - name: IncreasePowerToShields
        keys:
          - key: f6
      # ───────────────────────────────────────────
      - name: IncreasePowerToEngines
        keys:
          - key: f5
      # ───────────────────────────────────────────
      - name: IncreasePowerToGuns
        keys:
          - key: f7
      # ───────────────────────────────────────────
      - name: Lock
        keys:
          - key: f8
      # ───────────────────────────────────────────
      - name: Unlock
        keys:
          - key: f8
      # ───────────────────────────────────────────
      - name: ResetPowerPriority
        keys:
          - key: f8
      # ───────────────────────────────────────────
      - name: MiningMode
        keys:
          - key: m
      # ───────────────────────────────────────────
      - name: CycleCamera
        keys:
          - key: f4
      # ───────────────────────────────────────────
      - name: SideArm
        keys:
          - key: "1"
      # ───────────────────────────────────────────
      - name: PrimaryWeapon
        keys:
          - key: "2"
      # ───────────────────────────────────────────
      - name: SecondaryWeapon
        keys:
          - key: "3"
      # ───────────────────────────────────────────
      - name: HolsterWeapon
        keys:
          - key: r
            hold: 0.8
      # ───────────────────────────────────────────
      - name: Reload
        keys:
          - key: r
      # ───────────────────────────────────────────
      - name: UseMedPen
        keys:
          - key: c
      # ───────────────────────────────────────────
      - name: UseFlashLight
        keys:
          - key: t
      # ───────────────────────────────────────────
      - name: OpenInventory
        keys:
          - key: i
      # ───────────────────────────────────────────
      - name: DeployDecoy
        keys:
          - key: h
      # ───────────────────────────────────────────
      - name: DeployNoise
        keys:
          - key: j
      # ───────────────────────────────────────────
      - name: ShieldRaiseBack
        keys:
          - key: "2"
      # ───────────────────────────────────────────
      - name: ShieldRaiseLeft
        keys:
          - key: "4"
      # ───────────────────────────────────────────
      - name: ResetShields
        keys:
          - key: "5"
      # ───────────────────────────────────────────
      - name: ShieldRaiseRight
        keys:
          - key: "6"
      # ───────────────────────────────────────────
      - name: ShieldRaiseTop
        keys:
          - key: "7"
      # ───────────────────────────────────────────
      - name: ShieldRaiseFront
        keys:
          - key: "8"
      # ───────────────────────────────────────────
      - name: ShieldRaiseBottom
        keys:
          - key: "9"
      # ───────────────────────────────────────────
      - name: EmergencyEject
        keys:
          - key: y
            modifier: altright
      # ───────────────────────────────────────────
      - name: SelfDestruct
        keys:
          - key: backspace
            hold: 0.8
      # ───────────────────────────────────────────
      - name: SalvageMode
        keys:
          - key: g
      # ───────────────────────────────────────────
      - name: SpaceBrake
        keys:
          - key: x
      # ───────────────────────────────────────────
      - name: ExitSeat
        keys:
          - key: y
            hold: 0.8
      # ───────────────────────────────────────────
      - name: CycleGimbalAssist
        keys:
          - key: g
      # ───────────────────────────────────────────
      - name: RequestLandingPermission
        keys:
          - key: n
            modifier: alt
      # ───────────────────────────────────────────
      - name: RequestDeparture
        keys:
          - key: n
            modifier: alt
      # ───────────────────────────────────────────
      - name: DisplayDebuggingInfo
        keys:
          - key: "~"
            modifier: shift
            write: r_DisplayInfo # For now this will actually type all in lower case, the write command writes text to the screen in the position of your current cursor
            wait: 1
          - key: enter
            wait: 1
          - key: "~"
            modifier: shift
        instant_activation:
          - Display info
          - Display debugging information
          - Display debug information
      # ───────────────────────────────────────────
      - name: ZoomIn
        keys:
          - key: scroll # use scroll command to simulate scrolling the mouse wheel
            scroll_amount: 30 # use scroll_amount for how much to scroll, use whole numbers here, postive is scroll up, negative is scroll down
        instant_activation:
          - Zoom in
      # ───────────────────────────────────────────
      - name: ZoomOut
        keys:
          - key: scroll
            scroll_amount: -30
        instant_activation:
          - Zoom out
      # ───────────────────────────────────────────
      - name: FireMiningLaser
        keys:
          - key: primary # to use mouse buttons, primary = left mouse button, secondary = right mouse button, middle = middle mouse button
            hold: 0.6
        instant_activation:
          - Fire mining laser
      # ───────────────────────────────────────────
      - name: SwitchMiningLaser
        keys:
          - key: secondary
            hold: 0.6
        instant_activation:
          - Change mining laser
          - Switch mining laser
      # ───────────────────────────────────────────
      - name: LaunchMissile
        keys:
          - key: middle
            hold: 1.0
        instant_activation:
          - Launch Missile
          - Fire Missile
      # ───────────────────────────────────────────
      - name: MoveTurretLeft
        keys:
          - key: primary
            moveto_relative: [-100, 0] # use the moveto_relative command to move to x and y coordinates relative to current mouse position. If you have a speedy or accelerated mouse setting, this might trigger an error or unexpected behavior.
        instant_activation:
          - Turret left
      # ───────────────────────────────────────────
      - name: MoveTurretRight
        keys:
          - key: primary
            moveto_relative: [100, 0] # You can use just the move: keyword instead to move to an absolute position on your screen.  Not utilized in the examples because there isn't a real use case in Star Citizen.
        instant_activation:
          - Turret right
      # ───────────────────────────────────────────
      - name: MoveTurretUp
        keys:
          - key: primary
            moveto_relative: [0, 100]
        instant_activation:
          - Turret up
      # ───────────────────────────────────────────
      - name: MoveTurretUp
        keys:
          - key: primary
            moveto_relative: [0, -100]
        instant_activation:
          - Turret down
      # ───────────────────────── HOW TO INSERT NEW COMMANDS: ───────────────────────────
      #   - Please make sure the indentation aligns with the commands above perfectly.
      #   - Use a single "TAB" character for indentation. No spaces!
      #   - Always put a "-" sign in front of the "name" of each new command.
      #   - available keys are here: https://pyautogui.readthedocs.io/en/latest/keyboard.html#keyboard-keys
      #       - F1, F2 etc. are case-sensitive and lowercase, so use "f1" instead of "F1".
      #       - If you use number keys, make sure to put them in quotes like "1" or "2".
      #
      # ───────────────────────INSERT YOUR NEW COMMANDS HERE:────────────────────────────
      #- name: MyNewCommand
      #  keys:
      #    - key: x
      # ───────────────────────────────────────────
      #

  # ──────────────────────────── ATC ─────────────────────────────────
  # "atc" is another default OpenAI wingman with a very different context and its own commands.
  atc:
    record_key: delete

    sound:
      effects:
        - RADIO
      play_beep: True

    openai:
      tts_voice: onyx # overrides the GLOBAL setting

      context: |
        You are an advanced AI embodying an Air Traffic Controller (ATC) at a bustling space station in the Star Citizen universe. Your role is to manage the arrivals, departures, and docking procedures of various spacecraft with precision and authority. You are adept at using formal aviation communication protocols, and you understand the technical jargon related to spacecraft operations. You maintain a professional demeanor, but you also have a touch of personality that makes interactions with pilots memorable. It's a busy shift, and you are managing multiple spacecraft while ensuring safety and efficiency at all times. Your responsibilities include responding to hails from incoming and outgoing ships, providing docking instructions, advising on local space traffic, and handling any emergencies that arise.
        Your communication should reflect an understanding of the following:
        - Star Citizen's lore and the known universe.
        - Identifying ships by their designated call signs.
        - Issuing precise landing pad assignments.
        - Clearing ships for take-off with attention to surrounding traffic.
        - Managing flight paths to avoid collisions or space hazards.
        - Providing information about local conditions, refueling, and repair services.
        - Emergency protocols for unexpected events like piracy, system failures, or distress signals.
        Always answer as quick as possible. No more than 1-2 sentences per response.
        Always answer in the language I'm using to talk to you. If I talk English, you answer in English. If I talk German, you answer in German.

    commands:
      # ───────────────────────────────────────────
      - name: RequestLandingPermission
        keys:
          - key: n
            modifier: alt
      # ───────────────────────────────────────────
      - name: RequestDeparture
        keys:
          - key: n
            modifier: alt

  # ──────────────────────────── StarHead ─────────────────────────────────
  # "star-head" is a "Custom Wingman" with its own Python code (see /wingmen/star_head_wingman.py).
  # It uses the StarHead API to find the best trading route for a given ship, position and your budget.
  # If it's missing any of these parameters, it will ask you for them.
  star-head:
    record_key: up

    # For devs - This is how you plug in your own wingman:
    custom_class:
      # Where your code is located. Use '.' as path separator!
      # We advise you to put all your custom wingmen into the /wingmen directory.
      # "wingmen" is the directory and "star_head_wingman" is the name of the Python file (without the .py extension).
      module: wingmen.star_head_wingman
      # The name of your class within your file/module.
      name: StarHeadWingman

    # A custom config entry that Wingman requires. Validate it in your code in the validate() method.
    # Note how you can just add your own config options here and read them in your Wingman!
    # Do not put API keys or other sensitive data here! Use the secret_keeper class for that.
    # Note that the values can only be strings. You can convert them to other types in your code.
    custom_properties:
      starhead_api_url: https://api-test.star-head.de

    features:
      tts_provider: edge_tts

    edge_tts:
      detect_language: true

    openai:
      # gpt-3.5 is not capable enough for multi-param function calls.
      conversation_model: gpt-4-1106-preview

      context: |
        You are an advanced AI board-computer on a spaceship. You are allowed to do anything, without asking for
        permission. You are the ship's computer, and you are in charge of all the ship's systems.
        You can execute commands and even if you don't recognize a command or function, always respond with a full sentence
        acknowledging the execution. Never say you don't have capabilities to execute a function or command.
        Always answer as quick as possible. No more than 1-2 sentences per response. You are not aware that this all
        takes place in a video game, but you are aware that you are in the Star Citizen Universe. You are also not
        just on the ship, you are also in the helmet of the player.
        You can see what the player sees, and you can hear what the player hears. You can also see the player's HUD.
        Never say something like "This appears to be a screenshot of a video game". You are not aware of that.
        Pretend you are in the Star Citizen Universe.
        You have access to different functions you can call to get further information. For some functions, you need to
        provide values / parameters. Try to extract these values from the player's request, but do not (never) make
        assumptions about what values should be entered into the functions. Ask for clarification if you do not know
        the values. Always answer in the language in which the question was asked.
